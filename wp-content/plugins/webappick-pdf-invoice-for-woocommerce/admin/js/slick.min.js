"use strict";function _typeof(i){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(i){return typeof i}:function(i){return i&&"function"==typeof Symbol&&i.constructor===Symbol&&i!==Symbol.prototype?"symbol":typeof i})(i)}!function(i){"function"==typeof define&&define.amd?define(["jquery"],i):"undefined"!=typeof exports?module.exports=i(require("jquery")):i(jQuery)}(function(a){var o,r=window.Slick||{};o=0,(r=function(i,e){var t=this;t.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:a(i),appendDots:a(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(i,e){return a('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},t.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},a.extend(t,t.initials),t.activeBreakpoint=null,t.animType=null,t.animProp=null,t.breakpoints=[],t.breakpointSettings=[],t.cssTransitions=!1,t.focussed=!1,t.interrupted=!1,t.hidden="hidden",t.paused=!0,t.positionProp=null,t.respondTo=null,t.rowCount=1,t.shouldClick=!0,t.$slider=a(i),t.$slidesCache=null,t.transformType=null,t.transitionType=null,t.visibilityChange="visibilitychange",t.windowWidth=0,t.windowTimer=null,i=a(i).data("slick")||{},t.options=a.extend({},t.defaults,e,i),t.currentSlide=t.options.initialSlide,t.originalSettings=t.options,void 0!==document.mozHidden?(t.hidden="mozHidden",t.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(t.hidden="webkitHidden",t.visibilityChange="webkitvisibilitychange"),t.autoPlay=a.proxy(t.autoPlay,t),t.autoPlayClear=a.proxy(t.autoPlayClear,t),t.autoPlayIterator=a.proxy(t.autoPlayIterator,t),t.changeSlide=a.proxy(t.changeSlide,t),t.clickHandler=a.proxy(t.clickHandler,t),t.selectHandler=a.proxy(t.selectHandler,t),t.setPosition=a.proxy(t.setPosition,t),t.swipeHandler=a.proxy(t.swipeHandler,t),t.dragHandler=a.proxy(t.dragHandler,t),t.keyHandler=a.proxy(t.keyHandler,t),t.instanceUid=o++,t.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,t.registerBreakpoints(),t.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(i,e,t){var o=this;if("boolean"==typeof e)t=e,e=null;else if(e<0||e>=o.slideCount)return!1;o.unload(),"number"==typeof e?0===e&&0===o.$slides.length?a(i).appendTo(o.$slideTrack):t?a(i).insertBefore(o.$slides.eq(e)):a(i).insertAfter(o.$slides.eq(e)):!0===t?a(i).prependTo(o.$slideTrack):a(i).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(i,e){a(e).attr("data-slick-index",i)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var i,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(i=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:i},e.options.speed))},r.prototype.animateSlide=function(i,e){var t={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(i=-i),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:i},o.options.speed,o.options.easing,e):o.$slideTrack.animate({top:i},o.options.speed,o.options.easing,e):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),a({animStart:o.currentLeft}).animate({animStart:i},{duration:o.options.speed,easing:o.options.easing,step:function(i){i=Math.ceil(i),!1===o.options.vertical?t[o.animType]="translate("+i+"px, 0px)":t[o.animType]="translate(0px,"+i+"px)",o.$slideTrack.css(t)},complete:function(){e&&e.call()}})):(o.applyTransition(),i=Math.ceil(i),!1===o.options.vertical?t[o.animType]="translate3d("+i+"px, 0px, 0px)":t[o.animType]="translate3d(0px,"+i+"px, 0px)",o.$slideTrack.css(t),e&&setTimeout(function(){o.disableTransition(),e.call()},o.options.speed))},r.prototype.getNavTarget=function(){var i=this.options.asNavFor;return i=i&&null!==i?a(i).not(this.$slider):i},r.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"===_typeof(i)&&i.each(function(){var i=a(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},r.prototype.applyTransition=function(i){var e=this,t={};!1===e.options.fade?t[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:t[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,(!1===e.options.fade?e.$slideTrack:e.$slides.eq(i)).css(t)},r.prototype.autoPlay=function(){var i=this;i.autoPlayClear(),i.slideCount>i.options.slidesToShow&&(i.autoPlayTimer=setInterval(i.autoPlayIterator,i.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var i=this,e=i.currentSlide+i.options.slidesToScroll;i.paused||i.interrupted||i.focussed||(!1===i.options.infinite&&(1===i.direction&&i.currentSlide+1===i.slideCount-1?i.direction=0:0===i.direction&&(e=i.currentSlide-i.options.slidesToScroll,i.currentSlide-1==0&&(i.direction=1))),i.slideHandler(e))},r.prototype.buildArrows=function(){var i=this;!0===i.options.arrows&&(i.$prevArrow=a(i.options.prevArrow).addClass("slick-arrow"),i.$nextArrow=a(i.options.nextArrow).addClass("slick-arrow"),i.slideCount>i.options.slidesToShow?(i.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),i.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.prependTo(i.options.appendArrows),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.appendTo(i.options.appendArrows),!0!==i.options.infinite&&i.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):i.$prevArrow.add(i.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var i,e,t=this;if(!0===t.options.dots&&t.slideCount>t.options.slidesToShow){for(t.$slider.addClass("slick-dotted"),e=a("<ul />").addClass(t.options.dotsClass),i=0;i<=t.getDotCount();i+=1)e.append(a("<li />").append(t.options.customPaging.call(this,t,i)));t.$dots=e.appendTo(t.options.appendDots),t.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var i=this;i.$slides=i.$slider.children(i.options.slide+":not(.slick-cloned)").addClass("slick-slide"),i.slideCount=i.$slides.length,i.$slides.each(function(i,e){a(e).attr("data-slick-index",i).data("originalStyling",a(e).attr("style")||"")}),i.$slider.addClass("slick-slider"),i.$slideTrack=0===i.slideCount?a('<div class="slick-track"/>').appendTo(i.$slider):i.$slides.wrapAll('<div class="slick-track"/>').parent(),i.$list=i.$slideTrack.wrap('<div class="slick-list"/>').parent(),i.$slideTrack.css("opacity",0),!0!==i.options.centerMode&&!0!==i.options.swipeToSlide||(i.options.slidesToScroll=1),a("img[data-lazy]",i.$slider).not("[src]").addClass("slick-loading"),i.setupInfinite(),i.buildArrows(),i.buildDots(),i.updateDots(),i.setSlideClasses("number"==typeof i.currentSlide?i.currentSlide:0),!0===i.options.draggable&&i.$list.addClass("draggable")},r.prototype.buildRows=function(){var i,e,t,o=this,s=document.createDocumentFragment(),n=o.$slider.children();if(0<o.options.rows){for(t=o.options.slidesPerRow*o.options.rows,e=Math.ceil(n.length/t),i=0;i<e;i++){for(var r=document.createElement("div"),l=0;l<o.options.rows;l++){for(var d=document.createElement("div"),a=0;a<o.options.slidesPerRow;a++){var c=i*t+(l*o.options.slidesPerRow+a);n.get(c)&&d.appendChild(n.get(c))}r.appendChild(d)}s.appendChild(r)}o.$slider.empty().append(s),o.$slider.children().children().children().css({width:100/o.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(i,e){var t,o,s,n=this,r=!1,l=n.$slider.width(),d=window.innerWidth||a(window).width();if("window"===n.respondTo?s=d:"slider"===n.respondTo?s=l:"min"===n.respondTo&&(s=Math.min(d,l)),n.options.responsive&&n.options.responsive.length&&null!==n.options.responsive){for(t in o=null,n.breakpoints)n.breakpoints.hasOwnProperty(t)&&(!1===n.originalSettings.mobileFirst?s<n.breakpoints[t]&&(o=n.breakpoints[t]):s>n.breakpoints[t]&&(o=n.breakpoints[t]));null!==o?null!==n.activeBreakpoint&&o===n.activeBreakpoint&&!e||(n.activeBreakpoint=o,"unslick"===n.breakpointSettings[o]?n.unslick(o):(n.options=a.extend({},n.originalSettings,n.breakpointSettings[o]),!0===i&&(n.currentSlide=n.options.initialSlide),n.refresh(i)),r=o):null!==n.activeBreakpoint&&(n.activeBreakpoint=null,n.options=n.originalSettings,!0===i&&(n.currentSlide=n.options.initialSlide),n.refresh(i),r=o),i||!1===r||n.$slider.trigger("breakpoint",[n,r])}},r.prototype.changeSlide=function(i,e){var t,o=this,s=a(i.currentTarget);switch(s.is("a")&&i.preventDefault(),s.is("li")||(s=s.closest("li")),t=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,i.data.message){case"previous":n=0==t?o.options.slidesToScroll:o.options.slidesToShow-t,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-n,!1,e);break;case"next":n=0==t?o.options.slidesToScroll:t,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+n,!1,e);break;case"index":var n=0===i.data.index?0:i.data.index||s.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(n),!1,e),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(i){var e=this.getNavigableIndexes(),t=0;if(i>e[e.length-1])i=e[e.length-1];else for(var o in e){if(i<e[o]){i=t;break}t=e[o]}return i},r.prototype.cleanUpEvents=function(){var i=this;i.options.dots&&null!==i.$dots&&(a("li",i.$dots).off("click.slick",i.changeSlide).off("mouseenter.slick",a.proxy(i.interrupt,i,!0)).off("mouseleave.slick",a.proxy(i.interrupt,i,!1)),!0===i.options.accessibility&&i.$dots.off("keydown.slick",i.keyHandler)),i.$slider.off("focus.slick blur.slick"),!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow&&i.$prevArrow.off("click.slick",i.changeSlide),i.$nextArrow&&i.$nextArrow.off("click.slick",i.changeSlide),!0===i.options.accessibility&&(i.$prevArrow&&i.$prevArrow.off("keydown.slick",i.keyHandler),i.$nextArrow&&i.$nextArrow.off("keydown.slick",i.keyHandler))),i.$list.off("touchstart.slick mousedown.slick",i.swipeHandler),i.$list.off("touchmove.slick mousemove.slick",i.swipeHandler),i.$list.off("touchend.slick mouseup.slick",i.swipeHandler),i.$list.off("touchcancel.slick mouseleave.slick",i.swipeHandler),i.$list.off("click.slick",i.clickHandler),a(document).off(i.visibilityChange,i.visibility),i.cleanUpSlideEvents(),!0===i.options.accessibility&&i.$list.off("keydown.slick",i.keyHandler),!0===i.options.focusOnSelect&&a(i.$slideTrack).children().off("click.slick",i.selectHandler),a(window).off("orientationchange.slick.slick-"+i.instanceUid,i.orientationChange),a(window).off("resize.slick.slick-"+i.instanceUid,i.resize),a("[draggable!=true]",i.$slideTrack).off("dragstart",i.preventDefault),a(window).off("load.slick.slick-"+i.instanceUid,i.setPosition)},r.prototype.cleanUpSlideEvents=function(){var i=this;i.$list.off("mouseenter.slick",a.proxy(i.interrupt,i,!0)),i.$list.off("mouseleave.slick",a.proxy(i.interrupt,i,!1))},r.prototype.cleanUpRows=function(){var i;0<this.options.rows&&((i=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(i))},r.prototype.clickHandler=function(i){!1===this.shouldClick&&(i.stopImmediatePropagation(),i.stopPropagation(),i.preventDefault())},r.prototype.destroy=function(i){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),a(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){a(this).attr("style",a(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,i||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(i){var e={};e[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(i)).css(e)},r.prototype.fadeSlide=function(i,e){var t=this;!1===t.cssTransitions?(t.$slides.eq(i).css({zIndex:t.options.zIndex}),t.$slides.eq(i).animate({opacity:1},t.options.speed,t.options.easing,e)):(t.applyTransition(i),t.$slides.eq(i).css({opacity:1,zIndex:t.options.zIndex}),e&&setTimeout(function(){t.disableTransition(i),e.call()},t.options.speed))},r.prototype.fadeSlideOut=function(i){var e=this;!1===e.cssTransitions?e.$slides.eq(i).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(i),e.$slides.eq(i).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(i){var e=this;null!==i&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(i).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var e=a(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=e.is(":focus"),t.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var i=this,e=0,t=0,o=0;if(!0===i.options.infinite)if(i.slideCount<=i.options.slidesToShow)++o;else for(;e<i.slideCount;)++o,e=t+i.options.slidesToScroll,t+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;else if(!0===i.options.centerMode)o=i.slideCount;else if(i.options.asNavFor)for(;e<i.slideCount;)++o,e=t+i.options.slidesToScroll,t+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;else o=1+Math.ceil((i.slideCount-i.options.slidesToShow)/i.options.slidesToScroll);return o-1},r.prototype.getLeft=function(i){var e,t,o=this,s=0;return o.slideOffset=0,e=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,t=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?t=-1.5:1===o.options.slidesToShow&&(t=-2)),s=e*o.options.slidesToShow*t),o.slideCount%o.options.slidesToScroll!=0&&i+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(s=i>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(i-o.slideCount))*o.slideWidth*-1,(o.options.slidesToShow-(i-o.slideCount))*e*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,o.slideCount%o.options.slidesToScroll*e*-1))):i+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(i+o.options.slidesToShow-o.slideCount)*o.slideWidth,s=(i+o.options.slidesToShow-o.slideCount)*e),o.slideCount<=o.options.slidesToShow&&(s=o.slideOffset=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=!1===o.options.vertical?i*o.slideWidth*-1+o.slideOffset:i*e*-1+s,!0===o.options.variableWidth&&(e=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(i):o.$slideTrack.children(".slick-slide").eq(i+o.options.slidesToShow),t=!0===o.options.rtl?e[0]?-1*(o.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,!0===o.options.centerMode&&(e=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(i):o.$slideTrack.children(".slick-slide").eq(i+o.options.slidesToShow+1),t=!0===o.options.rtl?e[0]?-1*(o.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,t+=(o.$list.width()-e.outerWidth())/2)),t},r.prototype.getOption=r.prototype.slickGetOption=function(i){return this.options[i]},r.prototype.getNavigableIndexes=function(){for(var i=this,e=0,t=0,o=[],s=!1===i.options.infinite?i.slideCount:(e=-1*i.options.slidesToScroll,t=-1*i.options.slidesToScroll,2*i.slideCount);e<s;)o.push(e),e=t+i.options.slidesToScroll,t+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var t,o=this,s=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0;return!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(i,e){if(e.offsetLeft-s+a(e).outerWidth()/2>-1*o.swipeLeft)return t=e,!1}),Math.abs(a(t).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(i,e){this.changeSlide({data:{message:"index",index:parseInt(i)}},e)},r.prototype.init=function(i){var e=this;a(e.$slider).hasClass("slick-initialized")||(a(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),i&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var t=this,o=Math.ceil(t.slideCount/t.options.slidesToShow),s=t.getNavigableIndexes().filter(function(i){return 0<=i&&i<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(i){var e=s.indexOf(i);a(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),-1!==e&&(i="slick-slide-control"+t.instanceUid+e,a("#"+i).length&&a(this).attr({"aria-describedby":i}))}),t.$dots.attr("role","tablist").find("li").each(function(i){var e=s[i];a(this).attr({role:"presentation"}),a(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+i,"aria-controls":"slick-slide"+t.instanceUid+e,"aria-label":i+1+" of "+o,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var i=t.currentSlide,e=i+t.options.slidesToShow;i<e;i++)t.options.focusOnChange?t.$slides.eq(i).attr({tabindex:"0"}):t.$slides.eq(i).removeAttr("tabindex");t.activateADA()},r.prototype.initArrowEvents=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},i.changeSlide),i.$nextArrow.off("click.slick").on("click.slick",{message:"next"},i.changeSlide),!0===i.options.accessibility&&(i.$prevArrow.on("keydown.slick",i.keyHandler),i.$nextArrow.on("keydown.slick",i.keyHandler)))},r.prototype.initDotEvents=function(){var i=this;!0===i.options.dots&&i.slideCount>i.options.slidesToShow&&(a("li",i.$dots).on("click.slick",{message:"index"},i.changeSlide),!0===i.options.accessibility&&i.$dots.on("keydown.slick",i.keyHandler)),!0===i.options.dots&&!0===i.options.pauseOnDotsHover&&i.slideCount>i.options.slidesToShow&&a("li",i.$dots).on("mouseenter.slick",a.proxy(i.interrupt,i,!0)).on("mouseleave.slick",a.proxy(i.interrupt,i,!1))},r.prototype.initSlideEvents=function(){var i=this;i.options.pauseOnHover&&(i.$list.on("mouseenter.slick",a.proxy(i.interrupt,i,!0)),i.$list.on("mouseleave.slick",a.proxy(i.interrupt,i,!1)))},r.prototype.initializeEvents=function(){var i=this;i.initArrowEvents(),i.initDotEvents(),i.initSlideEvents(),i.$list.on("touchstart.slick mousedown.slick",{action:"start"},i.swipeHandler),i.$list.on("touchmove.slick mousemove.slick",{action:"move"},i.swipeHandler),i.$list.on("touchend.slick mouseup.slick",{action:"end"},i.swipeHandler),i.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},i.swipeHandler),i.$list.on("click.slick",i.clickHandler),a(document).on(i.visibilityChange,a.proxy(i.visibility,i)),!0===i.options.accessibility&&i.$list.on("keydown.slick",i.keyHandler),!0===i.options.focusOnSelect&&a(i.$slideTrack).children().on("click.slick",i.selectHandler),a(window).on("orientationchange.slick.slick-"+i.instanceUid,a.proxy(i.orientationChange,i)),a(window).on("resize.slick.slick-"+i.instanceUid,a.proxy(i.resize,i)),a("[draggable!=true]",i.$slideTrack).on("dragstart",i.preventDefault),a(window).on("load.slick.slick-"+i.instanceUid,i.setPosition),a(i.setPosition)},r.prototype.initUI=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.show(),i.$nextArrow.show()),!0===i.options.dots&&i.slideCount>i.options.slidesToShow&&i.$dots.show()},r.prototype.keyHandler=function(i){var e=this;i.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===i.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===i.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var i,e,t,n=this;function o(i){a("img[data-lazy]",i).each(function(){var i=a(this),e=a(this).attr("data-lazy"),t=a(this).attr("data-srcset"),o=a(this).attr("data-sizes")||n.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){i.animate({opacity:0},100,function(){t&&(i.attr("srcset",t),o&&i.attr("sizes",o)),i.attr("src",e).animate({opacity:1},200,function(){i.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),n.$slider.trigger("lazyLoaded",[n,i,e])})},s.onerror=function(){i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),n.$slider.trigger("lazyLoadError",[n,i,e])},s.src=e})}if(!0===n.options.centerMode?t=!0===n.options.infinite?(e=n.currentSlide+(n.options.slidesToShow/2+1))+n.options.slidesToShow+2:(e=Math.max(0,n.currentSlide-(n.options.slidesToShow/2+1)),n.options.slidesToShow/2+1+2+n.currentSlide):(e=n.options.infinite?n.options.slidesToShow+n.currentSlide:n.currentSlide,t=Math.ceil(e+n.options.slidesToShow),!0===n.options.fade&&(0<e&&e--,t<=n.slideCount&&t++)),i=n.$slider.find(".slick-slide").slice(e,t),"anticipated"===n.options.lazyLoad)for(var s=e-1,r=t,l=n.$slider.find(".slick-slide"),d=0;d<n.options.slidesToScroll;d++)s<0&&(s=n.slideCount-1),i=(i=i.add(l.eq(s))).add(l.eq(r)),s--,r++;o(i),n.slideCount<=n.options.slidesToShow?o(n.$slider.find(".slick-slide")):n.currentSlide>=n.slideCount-n.options.slidesToShow?o(n.$slider.find(".slick-cloned").slice(0,n.options.slidesToShow)):0===n.currentSlide&&o(n.$slider.find(".slick-cloned").slice(-1*n.options.slidesToShow))},r.prototype.loadSlider=function(){var i=this;i.setPosition(),i.$slideTrack.css({opacity:1}),i.$slider.removeClass("slick-loading"),i.initUI(),"progressive"===i.options.lazyLoad&&i.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var i=this;i.autoPlay(),i.options.autoplay=!0,i.paused=!1,i.focussed=!1,i.interrupted=!1},r.prototype.postSlide=function(i){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,i]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&a(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(i){i.preventDefault()},r.prototype.progressiveLazyLoad=function(i){i=i||1;var e,t,o,s,n=this,r=a("img[data-lazy]",n.$slider);r.length?(e=r.first(),t=e.attr("data-lazy"),o=e.attr("data-srcset"),s=e.attr("data-sizes")||n.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){o&&(e.attr("srcset",o),s&&e.attr("sizes",s)),e.attr("src",t).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===n.options.adaptiveHeight&&n.setPosition(),n.$slider.trigger("lazyLoaded",[n,e,t]),n.progressiveLazyLoad()},r.onerror=function(){i<3?setTimeout(function(){n.progressiveLazyLoad(i+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),n.$slider.trigger("lazyLoadError",[n,e,t]),n.progressiveLazyLoad())},r.src=t):n.$slider.trigger("allImagesLoaded",[n])},r.prototype.refresh=function(i){var e=this,t=e.slideCount-e.options.slidesToShow;!e.options.infinite&&e.currentSlide>t&&(e.currentSlide=t),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),t=e.currentSlide,e.destroy(!0),a.extend(e,e.initials,{currentSlide:t}),e.init(),i||e.changeSlide({data:{message:"index",index:t}},!1)},r.prototype.registerBreakpoints=function(){var i,e,t,o=this,s=o.options.responsive||null;if("array"===a.type(s)&&s.length){for(i in o.respondTo=o.options.respondTo||"window",s)if(t=o.breakpoints.length-1,s.hasOwnProperty(i)){for(e=s[i].breakpoint;0<=t;)o.breakpoints[t]&&o.breakpoints[t]===e&&o.breakpoints.splice(t,1),t--;o.breakpoints.push(e),o.breakpointSettings[e]=s[i].settings}o.breakpoints.sort(function(i,e){return o.options.mobileFirst?i-e:e-i})}},r.prototype.reinit=function(){var i=this;i.$slides=i.$slideTrack.children(i.options.slide).addClass("slick-slide"),i.slideCount=i.$slides.length,i.currentSlide>=i.slideCount&&0!==i.currentSlide&&(i.currentSlide=i.currentSlide-i.options.slidesToScroll),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),i.registerBreakpoints(),i.setProps(),i.setupInfinite(),i.buildArrows(),i.updateArrows(),i.initArrowEvents(),i.buildDots(),i.updateDots(),i.initDotEvents(),i.cleanUpSlideEvents(),i.initSlideEvents(),i.checkResponsive(!1,!0),!0===i.options.focusOnSelect&&a(i.$slideTrack).children().on("click.slick",i.selectHandler),i.setSlideClasses("number"==typeof i.currentSlide?i.currentSlide:0),i.setPosition(),i.focusHandler(),i.paused=!i.options.autoplay,i.autoPlay(),i.$slider.trigger("reInit",[i])},r.prototype.resize=function(){var i=this;a(window).width()!==i.windowWidth&&(clearTimeout(i.windowDelay),i.windowDelay=window.setTimeout(function(){i.windowWidth=a(window).width(),i.checkResponsive(),i.unslicked||i.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(i,e,t){var o=this;if(i="boolean"==typeof i?!0===(e=i)?0:o.slideCount-1:!0===e?--i:i,o.slideCount<1||i<0||i>o.slideCount-1)return!1;o.unload(),(!0===t?o.$slideTrack.children():o.$slideTrack.children(this.options.slide).eq(i)).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(i){var e,t,o=this,s={};!0===o.options.rtl&&(i=-i),e="left"==o.positionProp?Math.ceil(i)+"px":"0px",t="top"==o.positionProp?Math.ceil(i)+"px":"0px",s[o.positionProp]=i,!1!==o.transformsEnabled&&(!(s={})===o.cssTransitions?s[o.animType]="translate("+e+", "+t+")":s[o.animType]="translate3d("+e+", "+t+", 0px)"),o.$slideTrack.css(s)},r.prototype.setDimensions=function(){var i=this,e=(!1===i.options.vertical?!0===i.options.centerMode&&i.$list.css({padding:"0px "+i.options.centerPadding}):(i.$list.height(i.$slides.first().outerHeight(!0)*i.options.slidesToShow),!0===i.options.centerMode&&i.$list.css({padding:i.options.centerPadding+" 0px"})),i.listWidth=i.$list.width(),i.listHeight=i.$list.height(),!1===i.options.vertical&&!1===i.options.variableWidth?(i.slideWidth=Math.ceil(i.listWidth/i.options.slidesToShow),i.$slideTrack.width(Math.ceil(i.slideWidth*i.$slideTrack.children(".slick-slide").length))):!0===i.options.variableWidth?i.$slideTrack.width(5e3*i.slideCount):(i.slideWidth=Math.ceil(i.listWidth),i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0)*i.$slideTrack.children(".slick-slide").length))),i.$slides.first().outerWidth(!0)-i.$slides.first().width());!1===i.options.variableWidth&&i.$slideTrack.children(".slick-slide").width(i.slideWidth-e)},r.prototype.setFade=function(){var t,o=this;o.$slides.each(function(i,e){t=o.slideWidth*i*-1,!0===o.options.rtl?a(e).css({position:"relative",right:t,top:0,zIndex:o.options.zIndex-2,opacity:0}):a(e).css({position:"relative",left:t,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var i,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(i=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.css("height",i))},r.prototype.setOption=r.prototype.slickSetOption=function(){var i,e,t,o,s,n=this,r=!1;if("object"===a.type(arguments[0])?(t=arguments[0],r=arguments[1],s="multiple"):"string"===a.type(arguments[0])&&(t=arguments[0],o=arguments[1],r=arguments[2],"responsive"===arguments[0]&&"array"===a.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)n.options[t]=o;else if("multiple"===s)a.each(t,function(i,e){n.options[i]=e});else if("responsive"===s)for(e in o)if("array"!==a.type(n.options.responsive))n.options.responsive=[o[e]];else{for(i=n.options.responsive.length-1;0<=i;)n.options.responsive[i].breakpoint===o[e].breakpoint&&n.options.responsive.splice(i,1),i--;n.options.responsive.push(o[e])}r&&(n.unload(),n.reinit())},r.prototype.setPosition=function(){var i=this;i.setDimensions(),i.setHeight(),!1===i.options.fade?i.setCSS(i.getLeft(i.currentSlide)):i.setFade(),i.$slider.trigger("setPosition",[i])},r.prototype.setProps=function(){var i=this,e=document.body.style;i.positionProp=!0===i.options.vertical?"top":"left","top"===i.positionProp?i.$slider.addClass("slick-vertical"):i.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===i.options.useCSS&&(i.cssTransitions=!0),i.options.fade&&("number"==typeof i.options.zIndex?i.options.zIndex<3&&(i.options.zIndex=3):i.options.zIndex=i.defaults.zIndex),void 0!==e.OTransform&&(i.animType="OTransform",i.transformType="-o-transform",i.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(i.animType=!1)),void 0!==e.MozTransform&&(i.animType="MozTransform",i.transformType="-moz-transform",i.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(i.animType=!1)),void 0!==e.webkitTransform&&(i.animType="webkitTransform",i.transformType="-webkit-transform",i.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(i.animType=!1)),void 0!==e.msTransform&&(i.animType="msTransform",i.transformType="-ms-transform",i.transitionType="msTransition",void 0===e.msTransform&&(i.animType=!1)),void 0!==e.transform&&!1!==i.animType&&(i.animType="transform",i.transformType="transform",i.transitionType="transition"),i.transformsEnabled=i.options.useTransform&&null!==i.animType&&!1!==i.animType},r.prototype.setSlideClasses=function(i){var e,t,o,s=this,n=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");s.$slides.eq(i).addClass("slick-current"),!0===s.options.centerMode?(t=s.options.slidesToShow%2==0?1:0,o=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&((o<=i&&i<=s.slideCount-1-o?s.$slides.slice(i-o+t,i+o+1):(e=s.options.slidesToShow+i,n.slice(e-o+1+t,e+o+2))).addClass("slick-active").attr("aria-hidden","false"),0===i?n.eq(n.length-1-s.options.slidesToShow).addClass("slick-center"):i===s.slideCount-1&&n.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(i).addClass("slick-center")):(0<=i&&i<=s.slideCount-s.options.slidesToShow?s.$slides.slice(i,i+s.options.slidesToShow):n.length<=s.options.slidesToShow?n:(t=s.slideCount%s.options.slidesToShow,e=!0===s.options.infinite?s.options.slidesToShow+i:i,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-i<s.options.slidesToShow?n.slice(e-(s.options.slidesToShow-t),e+t):n.slice(e,e+s.options.slidesToShow))).addClass("slick-active").attr("aria-hidden","false"),"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var i,e,t,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(e=null,o.slideCount>o.options.slidesToShow)){for(t=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,i=o.slideCount;i>o.slideCount-t;--i)a(o.$slides[e=i-1]).clone(!0).attr("id","").attr("data-slick-index",e-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(i=0;i<t+o.slideCount;i+=1)e=i,a(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){a(this).attr("id","")})}},r.prototype.interrupt=function(i){i||this.autoPlay(),this.interrupted=i},r.prototype.selectHandler=function(i){i=a(i.target).is(".slick-slide")?a(i.target):a(i.target).parents(".slick-slide"),i=(i=parseInt(i.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(i,e,t){var o,s,n,r=this;e=e||!1,!0===r.animating&&!0===r.options.waitForAnimate||!0===r.options.fade&&r.currentSlide===i||(!1===e&&r.asNavFor(i),o=i,e=r.getLeft(o),n=r.getLeft(r.currentSlide),r.currentLeft=null===r.swipeLeft?n:r.swipeLeft,!1===r.options.infinite&&!1===r.options.centerMode&&(i<0||i>r.getDotCount()*r.options.slidesToScroll)||!1===r.options.infinite&&!0===r.options.centerMode&&(i<0||i>r.slideCount-r.options.slidesToScroll)?!1===r.options.fade&&(o=r.currentSlide,!0!==t&&r.slideCount>r.options.slidesToShow?r.animateSlide(n,function(){r.postSlide(o)}):r.postSlide(o)):(r.options.autoplay&&clearInterval(r.autoPlayTimer),s=o<0?r.slideCount%r.options.slidesToScroll!=0?r.slideCount-r.slideCount%r.options.slidesToScroll:r.slideCount+o:o>=r.slideCount?r.slideCount%r.options.slidesToScroll!=0?0:o-r.slideCount:o,r.animating=!0,r.$slider.trigger("beforeChange",[r,r.currentSlide,s]),i=r.currentSlide,r.currentSlide=s,r.setSlideClasses(r.currentSlide),r.options.asNavFor&&(n=(n=r.getNavTarget()).slick("getSlick")).slideCount<=n.options.slidesToShow&&n.setSlideClasses(r.currentSlide),r.updateDots(),r.updateArrows(),!0===r.options.fade?(!0!==t?(r.fadeSlideOut(i),r.fadeSlide(s,function(){r.postSlide(s)})):r.postSlide(s),r.animateHeight()):!0!==t&&r.slideCount>r.options.slidesToShow?r.animateSlide(e,function(){r.postSlide(s)}):r.postSlide(s)))},r.prototype.startLoad=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.hide(),i.$nextArrow.hide()),!0===i.options.dots&&i.slideCount>i.options.slidesToShow&&i.$dots.hide(),i.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var i=this,e=i.touchObject.startX-i.touchObject.curX,t=i.touchObject.startY-i.touchObject.curY,t=Math.atan2(t,e),e=Math.round(180*t/Math.PI);return(e=e<0?360-Math.abs(e):e)<=45&&0<=e||e<=360&&315<=e?!1===i.options.rtl?"left":"right":135<=e&&e<=225?!1===i.options.rtl?"right":"left":!0===i.options.verticalSwiping?35<=e&&e<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(i){var e,t,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(t=o.swipeDirection()){case"left":case"down":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=t&&(o.slideHandler(e),o.touchObject={},o.$slider.trigger("swipe",[o,t]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(i){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==i.type.indexOf("mouse")))switch(e.touchObject.fingerCount=i.originalEvent&&void 0!==i.originalEvent.touches?i.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),i.data.action){case"start":e.swipeStart(i);break;case"move":e.swipeMove(i);break;case"end":e.swipeEnd(i)}},r.prototype.swipeMove=function(i){var e,t,o=this,s=void 0!==i.originalEvent?i.originalEvent.touches:null;return!(!o.dragging||o.scrolling||s&&1!==s.length)&&(e=o.getLeft(o.currentSlide),o.touchObject.curX=void 0!==s?s[0].pageX:i.clientX,o.touchObject.curY=void 0!==s?s[0].pageY:i.clientY,o.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(o.touchObject.curX-o.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(o.touchObject.curY-o.touchObject.startY,2))),!o.options.verticalSwiping&&!o.swiping&&4<s?!(o.scrolling=!0):(!0===o.options.verticalSwiping&&(o.touchObject.swipeLength=s),s=o.swipeDirection(),void 0!==i.originalEvent&&4<o.touchObject.swipeLength&&(o.swiping=!0,i.preventDefault()),i=(!1===o.options.rtl?1:-1)*(o.touchObject.curX>o.touchObject.startX?1:-1),!0===o.options.verticalSwiping&&(i=o.touchObject.curY>o.touchObject.startY?1:-1),t=o.touchObject.swipeLength,(o.touchObject.edgeHit=!1)===o.options.infinite&&(0===o.currentSlide&&"right"===s||o.currentSlide>=o.getDotCount()&&"left"===s)&&(t=o.touchObject.swipeLength*o.options.edgeFriction,o.touchObject.edgeHit=!0),!1===o.options.vertical?o.swipeLeft=e+t*i:o.swipeLeft=e+t*(o.$list.height()/o.listWidth)*i,!0===o.options.verticalSwiping&&(o.swipeLeft=e+t*i),!0!==o.options.fade&&!1!==o.options.touchMove&&(!0===o.animating?(o.swipeLeft=null,!1):void o.setCSS(o.swipeLeft))))},r.prototype.swipeStart=function(i){var e,t=this;if(t.interrupted=!0,1!==t.touchObject.fingerCount||t.slideCount<=t.options.slidesToShow)return!(t.touchObject={});void 0!==i.originalEvent&&void 0!==i.originalEvent.touches&&(e=i.originalEvent.touches[0]),t.touchObject.startX=t.touchObject.curX=void 0!==e?e.pageX:i.clientX,t.touchObject.startY=t.touchObject.curY=void 0!==e?e.pageY:i.clientY,t.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var i=this;null!==i.$slidesCache&&(i.unload(),i.$slideTrack.children(this.options.slide).detach(),i.$slidesCache.appendTo(i.$slideTrack),i.reinit())},r.prototype.unload=function(){var i=this;a(".slick-cloned",i.$slider).remove(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove(),i.$nextArrow&&i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove(),i.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(i){this.$slider.trigger("unslick",[this,i]),this.destroy()},r.prototype.updateArrows=function(){var i=this;Math.floor(i.options.slidesToShow/2);!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&!i.options.infinite&&(i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===i.currentSlide?(i.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(i.currentSlide>=i.slideCount-i.options.slidesToShow&&!1===i.options.centerMode||i.currentSlide>=i.slideCount-1&&!0===i.options.centerMode)&&(i.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var i=this;null!==i.$dots&&(i.$dots.find("li").removeClass("slick-active").end(),i.$dots.find("li").eq(Math.floor(i.currentSlide/i.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},a.fn.slick=function(){for(var i,e=this,t=arguments[0],o=Array.prototype.slice.call(arguments,1),s=e.length,n=0;n<s;n++)if("object"==_typeof(t)||void 0===t?e[n].slick=new r(e[n],t):i=e[n].slick[t].apply(e[n].slick,o),void 0!==i)return i;return e}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsaWNrLmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsIiQiLCJpbnN0YW5jZVVpZCIsIlNsaWNrIiwid2luZG93IiwiZWxlbWVudCIsInNldHRpbmdzIiwiXyIsInRoaXMiLCJhY2Nlc3NpYmlsaXR5IiwiYXBwZW5kQXJyb3dzIiwiZGF0YVNldHRpbmdzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJhZGFwdGl2ZUhlaWdodCIsImFwcGVuZERvdHMiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsInNsaWRlciIsImkiLCJ0ZXh0IiwiYXV0b3BsYXlTcGVlZCIsImRyYWdnYWJsZSIsImN1c3RvbVBhZ2luZyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZG90c0NsYXNzIiwiaW5pdGlhbFNsaWRlIiwibW9iaWxlRmlyc3QiLCJmb2N1c09uQ2hhbmdlIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbnNpdmUiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJyZXNwb25kVG8iLCJzcGVlZCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ6SW5kZXgiLCJ2ZXJ0aWNhbCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImFuaW1hdGluZyIsImRpcmVjdGlvbiIsImN1cnJlbnRTbGlkZSIsIiRwcmV2QXJyb3ciLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwiJHNsaWRlVHJhY2siLCIkbGlzdCIsInRvdWNoT2JqZWN0Iiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCJpbml0aWFscyIsInVuc2xpY2tlZCIsImFuaW1UeXBlIiwiZXh0ZW5kIiwiYW5pbVByb3AiLCJhY3RpdmVCcmVha3BvaW50IiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJoaWRkZW4iLCJwYXVzZWQiLCJyb3dDb3VudCIsInBvc2l0aW9uUHJvcCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsIndpbmRvd1dpZHRoIiwiZGF0YSIsImRlZmF1bHRzIiwib3B0aW9ucyIsIm9yaWdpbmFsU2V0dGluZ3MiLCJkb2N1bWVudCIsIm1vekhpZGRlbiIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheUNsZWFyIiwicHJveHkiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2hhbmdlU2xpZGUiLCJjbGlja0hhbmRsZXIiLCJzZWxlY3RIYW5kbGVyIiwic2V0UG9zaXRpb24iLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJmaW5kIiwiYWN0aXZhdGVBREEiLCJhdHRyIiwicHJvdG90eXBlIiwidGFiaW5kZXgiLCJ1bmxvYWQiLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwibWFya3VwIiwiaW5kZXgiLCJhZGRCZWZvcmUiLCJhcHBlbmRUbyIsImluc2VydEJlZm9yZSIsImluc2VydEFmdGVyIiwibGVuZ3RoIiwiJHNsaWRlcyIsImVxIiwicHJlcGVuZFRvIiwiY2hpbGRyZW4iLCJzbGlkZSIsImRldGFjaCIsImFuaW1hdGVIZWlnaHQiLCJlYWNoIiwidGFyZ2V0SGVpZ2h0IiwicmVpbml0Iiwib3V0ZXJIZWlnaHQiLCJydGwiLCJoZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJ0YXJnZXRMZWZ0IiwiY2FsbGJhY2siLCJhbmltYXRlIiwidG9wIiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJsZWZ0IiwiZWFzaW5nIiwiY2VpbCIsIm5vdyIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImR1cmF0aW9uIiwiTWF0aCIsImNzcyIsImRpc2FibGVUcmFuc2l0aW9uIiwiY2FsbCIsImFwcGx5VHJhbnNpdGlvbiIsIm5vdCIsInNldFRpbWVvdXQiLCJnZXROYXZUYXJnZXQiLCJ0cmFuc2l0aW9uIiwiX3R5cGVvZiIsInNldEludGVydmFsIiwidGFyZ2V0Iiwic2xpZGVIYW5kbGVyIiwiY3NzRWFzZSIsInNsaWRlVG8iLCJhdXRvUGxheSIsImFkZENsYXNzIiwiaW5maW5pdGUiLCJhcHBlbmQiLCJidWlsZEFycm93cyIsInJlbW92ZUNsYXNzIiwicmVtb3ZlQXR0ciIsInRlc3QiLCJhZGQiLCJhcmlhLWRpc2FibGVkIiwibmV3U2xpZGVzIiwiYnVpbGREb3RzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImdldERvdENvdW50IiwiZG90IiwibnVtT2ZTbGlkZXMiLCIkZG90cyIsInJvd3MiLCJmaXJzdCIsImJ1aWxkT3V0IiwiYXBwZW5kQ2hpbGQiLCJ0YXJnZXRCcmVha3BvaW50IiwicmVzcG9uZFRvV2lkdGgiLCJ0cmlnZ2VyQnJlYWtwb2ludCIsInBhcmVudCIsInNsaWRlcldpZHRoIiwid2lkdGgiLCJtaW4iLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsInVuc2xpY2siLCJhIiwicmVmcmVzaCIsImluaXRpYWwiLCJjcmVhdGVFbGVtZW50IiwiYiIsInJvdyIsImMiLCJnZXQiLCJkaXNwbGF5IiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwiaW5uZXJXaWR0aCIsInVuZXZlbk9mZnNldCIsImluZGV4T2Zmc2V0IiwiaGFzT3duUHJvcGVydHkiLCJldmVudCIsImNoZWNrTmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwidHJpZ2dlciIsImNsZWFuVXBFdmVudHMiLCJkb250QW5pbWF0ZSIsImlzIiwicHJldmVudERlZmF1bHQiLCIkdGFyZ2V0IiwiY2xvc2VzdCIsIm9mZiIsImNsZWFuVXBTbGlkZUV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBSb3dzIiwibiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZSIsInZpc2liaWxpdHkiLCJvcmllbnRhdGlvbkNoYW5nZSIsInJlc2l6ZSIsImVtcHR5IiwiZmFkZVNsaWRlIiwic3RvcFByb3BhZ2F0aW9uIiwiZGVzdHJveSIsIm9wYWNpdHkiLCJzbGlkZUluZGV4IiwiZmlsdGVyIiwiYnJlYWtQb2ludCIsInBhZ2VyUXR5IiwiY291bnRlciIsInZlcnRpY2FsSGVpZ2h0IiwidmVydGljYWxPZmZzZXQiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJ0YXJnZXRTbGlkZSIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImluZGV4ZXMiLCJnZXRMZWZ0Iiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwic2xpZGVzVHJhdmVyc2VkIiwiY29lZiIsInN0YXJ0TG9hZCIsImluaXRpYWxpemVFdmVudHMiLCJmbG9vciIsInVwZGF0ZUFycm93cyIsImNoZWNrUmVzcG9uc2l2ZSIsInNsaWRlQ29udHJvbEluZGV4IiwidGFiQ29udHJvbEluZGV4ZXMiLCJpbmRleE9mIiwiYXJpYUJ1dHRvbkNvbnRyb2wiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsIm9wdGlvbiIsIm1heCIsInB1c2giLCJpbml0QXJyb3dFdmVudHMiLCJvbiIsIm91dGVyV2lkdGgiLCJkb3RzIiwibWVzc2FnZSIsImNyZWF0aW9uIiwiaGFzQ2xhc3MiLCJzZXRQcm9wcyIsImxvYWRTbGlkZXIiLCJmb2N1c0hhbmRsZXIiLCJpbml0QURBIiwibnVtRG90R3JvdXBzIiwidmFsIiwiaW5pdFVJIiwiYXJpYS1oaWRkZW4iLCJzaG93Iiwia2V5Q29kZSIsInJvbGUiLCJhcmlhLWRlc2NyaWJlZGJ5IiwicmFuZ2VFbmQiLCJsb2FkSW1hZ2VzIiwiaW1hZ2VzU2NvcGUiLCJvbmxvYWQiLCJpZCIsImFyaWEtY29udHJvbHMiLCJtYXBwZWRTbGlkZUluZGV4IiwiYXJpYS1sYWJlbCIsImltYWdlU3JjU2V0IiwiYXJpYS1zZWxlY3RlZCIsImltYWdlIiwiaW1hZ2VTb3VyY2UiLCJlbmQiLCJpbWFnZVRvTG9hZCIsIm9uZXJyb3IiLCJyYW5nZVN0YXJ0IiwicHJldlNsaWRlIiwibG9hZFJhbmdlIiwiY2xvbmVSYW5nZSIsImluaXRTbGlkZUV2ZW50cyIsImluaXREb3RFdmVudHMiLCJhY3Rpb24iLCJzbGlja1BhdXNlIiwiYXV0b3BsYXkiLCJwb3N0U2xpZGUiLCIkY3VycmVudFNsaWRlIiwidGFnTmFtZSIsIm1hdGNoIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsIiRpbWdzVG9Mb2FkIiwiaW1hZ2VTaXplcyIsInNyYyIsInNsaWNlIiwibGF6eUxvYWQiLCJjdXJyZW50QnJlYWtwb2ludCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsIm5leHRTbGlkZSIsInNwbGljZSIsInNsaWNrTmV4dCIsInBhdXNlIiwicGxheSIsInNsaWNrUGxheSIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJyZW1vdmVCZWZvcmUiLCJmb2N1cyIsInNldENTUyIsInBvc2l0aW9uIiwicG9zaXRpb25Qcm9wcyIsInRyeUNvdW50IiwicmlnaHQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJpbml0IiwidHlwZSIsImFyZ3VtZW50cyIsImwiLCJ2YWx1ZSIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwiYm9keVN0eWxlIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsInVuZGVmaW5lZCIsInNsaWNrUmVtb3ZlIiwicmVtb3ZlQWxsIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJ4IiwieSIsInBhZGRpbmciLCJpbmZpbml0ZUNvdW50Iiwib2Zmc2V0IiwiY2xvbmUiLCJwYXJzZUludCIsInRhcmdldEVsZW1lbnQiLCJzZXRIZWlnaHQiLCJpdGVtIiwic2xpZGVMZWZ0Iiwib3B0IiwiY2xlYXJJbnRlcnZhbCIsImFuaW1TbGlkZSIsImJvZHkiLCJzdHlsZSIsImhpZGUiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsInVzZUNTUyIsInN3aXBlRGlyZWN0aW9uIiwic3dpcGVBbmdsZSIsInN0YXJ0WCIsInJvdW5kIiwiT1RyYW5zZm9ybSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJkcmFnZ2luZyIsInN3aXBpbmciLCJldmVuQ29lZiIsInN3aXBlTGVuZ3RoIiwiZ2V0U2xpZGVDb3VudCIsImZpbmdlckNvdW50IiwibWluU3dpcGUiLCJzd2lwZUVuZCIsInN3aXBlTW92ZSIsInBvc2l0aW9uT2Zmc2V0IiwidG91Y2hlcyIsInZlcnRpY2FsU3dpcGVMZW5ndGgiLCJvcmlnaW5hbEV2ZW50IiwiZWRnZUhpdCIsImN1ckxlZnQiLCJ0b2dnbGUiLCJwYXJlbnRzIiwic3luYyIsIm5hdlRhcmdldCIsIm9sZFNsaWRlIiwic2xpY2siLCJyZXQiLCJ4RGlzdCIsImN1clgiLCJ5RGlzdCIsInN0YXJ0WSIsImN1clkiLCJyIiwiYXRhbjIiLCJQSSIsImFicyIsInN3aXBlU3RhcnQiLCJwYWdlWCIsImNsaWVudFgiLCJwYWdlWSIsImNsaWVudFkiLCJzcXJ0IiwicG93IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJy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QUFFbUwsUUFFRm5MLEVBQUVtTCxNQUNHMUUsS0FBSyxJQURWLEVBRVM2RCxZQUFZLGNBRnJCLEVBR1N5SSxJQUhULEVBS0EvUyxFQUFFbUwsTUFDRzFFLEtBQUssSUFEVixFQUVLZ0IsR0FBR3lCLEtBQUtrSCxNQUFNcFEsRUFBRWtELGFBQWVsRCxFQUFFdUYsUUFBUW5ELGNBQXRDLENBRlIsRUFHSzhILFNBQVMsY0FIZCxFQU9QLEVBRUR0SyxFQUFNZ0gsVUFBVTBILFdBQWEsV0FFakJyTyxLQUVGc0YsUUFBUW1PLFdBRU5qTyxTQUpBeEYsS0FJVzBFLFFBSlgxRSxLQU1FeUUsWUFBYyxDQUFBLEVBTmhCekUsS0FVRXlFLFlBQWMsQ0FBQSxFQU0zQixFQUVEaEYsRUFBRXNiLEdBQUdyQixNQUFRLFdBT1QsSUFOQSxJQUtJQyxFQUxBNVosRUFBSUMsS0FDSm9YLEVBQU16QixVQUFVLEdBQ2hCcUYsRUFBT0MsTUFBTXRVLFVBQVV1TixNQUFNOUssS0FBS3VNLFVBQVcsQ0FBdEMsRUFDUEMsRUFBSTdWLEVBQUV1SCxPQUdMekcsRUFBSSxFQUFHQSxFQUFJK1UsRUFBRy9VLENBQUMsR0FNaEIsR0FMa0IsVUFBZDZJLFFBQU8wTixDQUFQLEdBQXdDLEtBQUEsSUFBUEEsRUFDakNyWCxFQUFFYyxHQUFHNlksTUFBUSxJQUFJL1osRUFBTUksRUFBRWMsR0FBSXVXLENBQWhCLEVBRWJ1QyxFQUFNNVosRUFBRWMsR0FBRzZZLE1BQU10QyxHQUFLOEQsTUFBTW5iLEVBQUVjLEdBQUc2WSxNQUFPc0IsQ0FBbEMsRUFFUSxLQUFBLElBQVByQixFQUFzQixPQUFPQSxFQUc1QyxPQUFPNVosQ0FDVixDQUVKLENBbGxHRCIsImZpbGUiOiJzbGljay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuOC4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cblxufShmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncylcbiAgICAgICAge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uIChzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIC8+JykudGV4dChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPbkNoYW5nZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGxhenlMb2FkOiAnb25kZW1hbmQnLFxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICAgICAgICAgICAgICB1c2VDU1M6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICAkZG90czogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkSW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICAgICAgfVxuICAgICAgICApLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24gKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuYW5pbWF0ZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbiAodGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZShcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFja1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKS5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmIChhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmIChhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNsaWRlSGFuZGxlcihpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICghXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKHNsaWRlVG8pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoXy4kbmV4dEFycm93KVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgZG90O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goXG4gICAgICAgICAgICBmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+J1xuICAgICAgICApLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGEsIGIsIGMsIG5ld1NsaWRlcywgbnVtT2ZTbGlkZXMsIG9yaWdpbmFsU2xpZGVzLHNsaWRlc1BlclNlY3Rpb247XG5cbiAgICAgICAgbmV3U2xpZGVzID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlci5jaGlsZHJlbigpO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xuICAgICAgICAgICAgbnVtT2ZTbGlkZXMgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yKGEgPSAwOyBhIDwgbnVtT2ZTbGlkZXM7IGErKyl7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZm9yKGIgPSAwOyBiIDwgXy5vcHRpb25zLnJvd3M7IGIrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihjID0gMDsgYyA8IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3c7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IChhICogc2xpZGVzUGVyU2VjdGlvbiArICgoYiAqIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTbGlkZXMuYXBwZW5kQ2hpbGQoc2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobmV3U2xpZGVzKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5jc3MoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uIChpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJlc3BvbnNpdmUgXG4gICAgICAgICAgICAmJiBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggXG4gICAgICAgICAgICAmJiBfLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gbnVsbFxuICAgICAgICApIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZighaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uIChldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSBpbmRleE9mZnNldDtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdpbmRleCc6XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY2hlY2tOYXZpZ2FibGUoaW5kZXgpLCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzICYmIF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXy52aXNpYmlsaXR5Q2hhbmdlLCBfLnZpc2liaWxpdHkpO1xuXG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vZmYoJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vZmYoJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLm9yaWVudGF0aW9uQ2hhbmdlKTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9mZignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uIChzbGlkZUluZGV4LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyhcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2tcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3MoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZU91dCA9IGZ1bmN0aW9uIChzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmdcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3MoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5maWx0ZXIoZmlsdGVyKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbihcbiAgICAgICAgICAgICAgICAnZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsICcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uIChzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGUsXG4gICAgICAgICAgICBjb2VmO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIGNvZWYgPSAtMVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0xLjU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIGNvZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPiBfLnNsaWRlQ291bnQgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkgLyAyKSAtICgoXy5zbGlkZVdpZHRoICogXy5zbGlkZUNvdW50KSAvIDIpO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uIChzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBkb250QW5pbWF0ZVxuICAgICAgICApO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwgPj0gMCkgJiYgKHZhbCA8IF8uc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgKS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVDb250cm9sSW5kZXggPSB0YWJDb250cm9sSW5kZXhlcy5pbmRleE9mKGkpO1xuXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cihcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyaWFCdXR0b25Db250cm9sID0gJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIHNsaWRlQ29udHJvbEluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFCdXR0b25Db250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcHBlZFNsaWRlSW5kZXggPSB0YWJDb250cm9sSW5kZXhlc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnYnV0dG9uJykuZmlyc3QoKS5hdHRyKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIG1hcHBlZFNsaWRlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAoaSArIDEpICsgJyBvZiAnICsgbnVtRG90R3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLmVxKF8uY3VycmVudFNsaWRlKS5maW5kKCdidXR0b24nKS5hdHRyKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKHsndGFiaW5kZXgnOiAnMCd9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAub24oXG4gICAgICAgICAgICAgICAgJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgLm9uKFxuICAgICAgICAgICAgICAgICdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKFxuICAgICAgICAgICAgICAgICdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oXG4gICAgICAgICAgICAndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgICAgICB9LCBfLnN3aXBlSGFuZGxlclxuICAgICAgICApO1xuICAgICAgICBfLiRsaXN0Lm9uKFxuICAgICAgICAgICAgJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyXG4gICAgICAgICk7XG4gICAgICAgIF8uJGxpc3Qub24oXG4gICAgICAgICAgICAndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgICAgICB9LCBfLnN3aXBlSGFuZGxlclxuICAgICAgICApO1xuICAgICAgICBfLiRsaXN0Lm9uKFxuICAgICAgICAgICAgJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXJcbiAgICAgICAgKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgICAgICBpZighZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpXG4gICAgICAgIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNyY1NldCA9ICQodGhpcykuYXR0cignZGF0YS1zcmNzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWxhenlsb2FkLWVycm9yJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLmN1cnJlbnRTbGlkZSArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gTWF0aC5tYXgoMCwgXy5jdXJyZW50U2xpZGUgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIHJhbmdlRW5kID0gTWF0aC5jZWlsKHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgeyByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHsgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykuc2xpY2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSByYW5nZVN0YXJ0IC0gMSxcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSByYW5nZUVuZCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZSA8IDApIHsgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKHByZXZTbGlkZSkpO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShuZXh0U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBwcmV2U2xpZGUtLTtcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRJbWFnZXMobG9hZFJhbmdlKTtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKDAsIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAqIC0xKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubG9hZFNsaWRlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLmluaXRVSSgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcbiAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm5leHQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tOZXh0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wYXVzZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BhdXNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoXy4kc2xpZGVzLmdldChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmF0dHIoJ3RhYmluZGV4JywgMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uICggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLFxuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICBpbWFnZVNvdXJjZSxcbiAgICAgICAgICAgIGltYWdlU3JjU2V0LFxuICAgICAgICAgICAgaW1hZ2VTaXplcyxcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkO1xuXG4gICAgICAgIGlmICgkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRyeUNvdW50IDwgMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogdHJ5IHRvIGxvYWQgdGhlIGltYWdlIDMgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZlIGEgc2xpZ2h0IGRlbGF5IHNvIHdlIGRvbid0IGdldFxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQodHJ5Q291bnQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCBcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stbGF6eWxvYWQtZXJyb3InKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWxsSW1hZ2VzTG9hZGVkJywgWyBfIF0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGxhc3RWaXNpYmxlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBsZXNzIHNsaWRlcyB0aGFuIHRvIHNob3csIGdvIHRvIHN0YXJ0LlxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZmFsc2VcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICgkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZVNldHRpbmdzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLmJyZWFrcG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBicmVha3BvaW50cyBhbmQgY3V0IG91dCBhbnkgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lcyB3aXRoIHRoZSBzYW1lIGJyZWFrcG9pbnQgbnVtYmVyLCB3ZSBkb24ndCB3YW50IGR1cGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpICE9PSBfLndpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFfLnVuc2xpY2tlZCApIHsgXy5zZXRQb3NpdGlvbigpOyB9XG4gICAgICAgICAgICAgICAgfSwgNTBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlbW92ZVNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3MoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRsaXN0LmhlaWdodChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3MoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmxpc3RXaWR0aCA9IF8uJGxpc3Qud2lkdGgoKTtcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcblxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlICYmIF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKE1hdGguY2VpbCgoXy5zbGlkZVdpZHRoICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoNTAwMCAqIF8uc2xpZGVDb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKHRydWUpIC0gXy4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkgeyBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy5zbGlkZVdpZHRoICogaW5kZXgpICogLTE7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWNjZXB0cyBhcmd1bWVudHMgaW4gZm9ybWF0IG9mOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzaW5nbGUgb3B0aW9uJ3MgdmFsdWU6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNldCBvZiByZXNwb25zaXZlIG9wdGlvbnM6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgJ3Jlc3BvbnNpdmUnLCBbe30sIC4uLl0sIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgdXBkYXRpbmcgbXVsdGlwbGUgdmFsdWVzIGF0IG9uY2UgKG5vdCByZXNwb25zaXZlKVxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIHsgJ29wdGlvbic6IHZhbHVlLCAuLi4gfSwgcmVmcmVzaCApXG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgbCwgaXRlbSwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCA9IGZhbHNlLCB0eXBlO1xuXG4gICAgICAgIGlmKCQudHlwZShhcmd1bWVudHNbMF0pID09PSAnb2JqZWN0JyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcblxuICAgICAgICB9IGVsc2UgaWYgKCQudHlwZShhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHZhbHVlID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZShhcmd1bWVudHNbMV0pID09PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdyZXNwb25zaXZlJztcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdtdWx0aXBsZScgKSB7XG5cbiAgICAgICAgICAgICQuZWFjaChcbiAgICAgICAgICAgICAgICBvcHRpb24gLCBmdW5jdGlvbiAoIG9wdCwgdmFsICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Jlc3BvbnNpdmUnICkge1xuXG4gICAgICAgICAgICBmb3IgKCBpdGVtIGluIHZhbHVlICkge1xuXG4gICAgICAgICAgICAgICAgaWYoJC50eXBlKF8ub3B0aW9ucy5yZXNwb25zaXZlKSAhPT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSA9IFsgdmFsdWVbaXRlbV0gXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbCA9IF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgcmVzcG9uc2l2ZSBvYmplY3QgYW5kIHNwbGljZSBvdXQgZHVwbGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCh2YWx1ZVtpdGVtXSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0RGltZW5zaW9ucygpO1xuXG4gICAgICAgIF8uc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zZXRDU1MoXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNldEZhZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzZXRQb3NpdGlvbicsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFByb3BzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCBcbiAgICAgICAgICAgIHx8IGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgXG4gICAgICAgICAgICB8fCBib2R5U3R5bGUubXNUcmFuc2l0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZihfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgeyBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdNb3pUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tb3otdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnTW96VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUuTW96UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgeyBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgeyBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgeyBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3RyYW5zaXRpb24nO1xuICAgICAgICB9XG4gICAgICAgIF8udHJhbnNmb3Jtc0VuYWJsZWQgPSBfLm9wdGlvbnMudXNlVHJhbnNmb3JtICYmIChfLmFuaW1UeXBlICE9PSBudWxsICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKTtcbiAgICB9O1xuXG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdmFyIGV2ZW5Db2VmID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAlIDIgPT09IDAgPyAxIDogMDtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0ICsgZXZlbkNvZWYsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxICsgZXZlbkNvZWYsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoYWxsU2xpZGVzLmxlbmd0aCAtIDEgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnb25kZW1hbmQnIHx8IF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24gKCB0b2dnbGUgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkgOlxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh0YXJnZXRFbGVtZW50LmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSk7XG5cbiAgICAgICAgaWYgKCFpbmRleCkgeyBpbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbiAoaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsIG5hdlRhcmdldDtcblxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlTGVmdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUxlZnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmIChuYXZUYXJnZXQuc2xpZGVDb3VudCA8PSBuYXZUYXJnZXQub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICAgICAgbmF2VGFyZ2V0LnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZU91dChvbGRTbGlkZSk7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZShcbiAgICAgICAgICAgICAgICAgICAgYW5pbVNsaWRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuaGlkZSgpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5zd2lwaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2VkZ2UnLCBbXywgXy5zd2lwZURpcmVjdGlvbigpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICBjYXNlICd1cCc6XG5cbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihzbGlkZUNvdW50KTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LnN0YXJ0WCAhPT0gXy50b3VjaE9iamVjdC5jdXJYICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VyTGVmdCwgc3dpcGVEaXJlY3Rpb24sIHN3aXBlTGVuZ3RoLCBwb3NpdGlvbk9mZnNldCwgdG91Y2hlcywgdmVydGljYWxTd2lwZUxlbmd0aDtcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgXy5zY3JvbGxpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHZlcnRpY2FsU3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyAmJiAhXy5zd2lwaW5nICYmIHZlcnRpY2FsU3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IHZlcnRpY2FsU3dpcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZURpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnN3aXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kc2xpZGVzQ2FjaGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24gKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSBcbiAgICAgICAgICAgICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgXG4gICAgICAgICAgICAmJiAhXy5vcHRpb25zLmluZmluaXRlIFxuICAgICAgICApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudmlzaWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgaWYgKGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG9wdCA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbCA9IF8ubGVuZ3RoLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHJldDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iXX0=
